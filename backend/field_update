#!/usr/bin/env python3
# Copyright (C) 2021 Humanitarian OpenStreetmap Team

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Humanitarian OpenStreetmap Team
# 1100 13th Street NW Suite 800 Washington, D.C. 20005
# <info@hotosm.org>
"""[Responsible for Field Update of Rawdata Table's , It will be one time update for all elements ]
Raises:
    err: [Database Connection Error]
    err: [Null Query Error]
Returns:
    [result]: [geom column Populated]
"""

import argparse
import datetime
import logging
import os
import sys
import time
from configparser import ConfigParser
from enum import Enum

from dateutil.relativedelta import relativedelta
from psycopg2 import *
from psycopg2.extras import *
from tqdm import tqdm

logging.basicConfig(format="%(asctime)s - %(message)s", level=logging.DEBUG)


class BatchFrequency(Enum):
    HOURLY = "h"
    DAILY = "d"
    WEEKLY = "w"
    MONTHLY = "m"
    QUARTERLY = "q"
    YEARLY = "y"

    def __str__(self):
        return self.value


def assign_end_wrt_frequency(start, frequency):
    #     logging.debug( f"""frequency Osm  {frequency}""")
    if frequency == BatchFrequency.HOURLY:
        end = start - relativedelta(hours=1)
    if frequency == BatchFrequency.YEARLY:
        end = start - relativedelta(years=1)
    if frequency == BatchFrequency.MONTHLY:
        end = start - relativedelta(months=1)
    if frequency == BatchFrequency.QUARTERLY:
        end = start - relativedelta(months=4)
    if frequency == BatchFrequency.WEEKLY:
        end = start - relativedelta(days=7)
    if frequency == BatchFrequency.DAILY:
        end = start - relativedelta(days=1)
    return end


class Database:
    """[Database Class responsible for connection , query execution and time tracking, can be used from multiple funtion and class returns result ,connection and cursor]"""

    def __init__(self, db_params=None):
        """Database class constructor"""
        self.db_params = db_params

    def connect(self):
        """Database class instance method used to connect to database parameters with error printing"""

        try:
            self.conn = (
                connect(**self.db_params)
                if self.db_params
                else connect(
                    host=os.environ["PGHOST"],
                    port=os.environ["PGPORT"],
                    user=os.environ["PGUSER"],
                    password=os.environ["PGPASSWORD"],
                    database=os.environ["PGDATABASE"],
                )
            )
            self.cur = self.conn.cursor(cursor_factory=DictCursor)
            # logging.debug("Database connection has been Successful...")
            return self.conn, self.cur
        except OperationalError as err:
            """pass exception to function"""
            # set the connection to 'None' in case of error
            self.conn = None
            raise err

    def executequery(self, query):
        """Function to execute query after connection"""
        # Check if the connection was successful
        try:
            if self.conn != None:
                self.cursor = self.cur
                if query != None:
                    # catch exception for invalid SQL statement

                    try:
                        self.cursor.execute(query)
                        self.conn.commit()
                        # print(query)
                        try:
                            result = self.cursor.fetchall()

                            return result
                        except:
                            return self.cursor.statusmessage
                    except Exception as err:
                        raise err

                else:
                    raise ValueError("Query is Null")
            else:
                print("Database is not connected")
        except Exception as err:
            print("Oops ! You forget to have connection first")
            raise err

    def close_conn(self):
        """function for clossing connection to avoid memory leaks"""

        # Check if the connection was successful
        try:
            if self.conn != None:
                if self.cursor:
                    self.cursor.close()
                    self.conn.close()
                    # logging.debug("Connection closed")
        except Exception as err:
            raise err


class Raw:
    """This class connects to Raw database and responsible for Values derived from database"""

    def __init__(self, parameters=None):
        self.database = Database()
        self.con, self.cur = self.database.connect()

        self.params = parameters

    def getMax_timestamp(self, table):
        """Function to extract latest maximum osm element id and minimum osm element id present in  Table"""

        query = f"""select min("timestamp") as minimum , max("timestamp") as maximum from  {table};"""
        record = self.database.executequery(query)
        logging.debug(
            f"""Maximum {table}  timestamp fetched is {record[0][1]} and minimum is  {record[0][0]}"""
        )
        return record[0][1], record[0][0]

    def update_field(
        self,
        start,
        end,
        target_table,
        target_column,
        target_geom,
        source_table,
        source_column,
        source_geom,
        insert_type,
    ):
        """Function that updates column of table"""
        if insert_type.lower() == "array":
            select_query = f"""WITH 
            t1 AS (
                SELECT 
                    osm_id,
                    ST_Centroid({target_geom}) AS geom
                FROM 
                    {target_table}
                WHERE 
                    timestamp BETWEEN '{start}'::timestamp AND '{end}'::timestamp
            ),
            t2 AS (
                SELECT 
                    t1.osm_id,
                    CASE 
                        WHEN COUNT(cg.{source_column}) = 0 THEN ARRAY[0]::integer[]
                        ELSE array_agg(COALESCE(cg.{source_column}, 0))
                    END AS aa_fids
                FROM 
                    t1
                LEFT JOIN 
                    {source_table} cg ON ST_Intersects(t1.geom, cg.{source_geom})
                GROUP BY 
                    t1.osm_id
            )
            UPDATE 
                {target_table} uw
            SET 
                {target_column} = t2.aa_fids
            FROM 
                t2
            WHERE 
                t2.osm_id = uw.osm_id;"""
            self.database.executequery(select_query)

        else:
            query = f"""
            WITH table_filtered AS(
                SELECT osm_id,{target_geom}
                FROM {target_table}
                WHERE ("timestamp" >= '{start}'
                and "timestamp" <= '{end}') 
            )
            update
                {target_table} as wp
                SET
                {target_column} = COALESCE((
                select
                    cu.{source_column}
                from {source_table} cu 
                where ST_Intersects(tf.{target_geom},cu.{source_geom})
                LIMIT 1
                        )::int,0::int)
                from table_filtered tf
            where
                wp.osm_id = tf.osm_id"""

            self.database.executequery(query)
        # logging.debug(f"""Changed Row : {result}""")

    def batch_update(
        self,
        start_batch_date,
        end_batch_date,
        batch_frequency,
        target_table,
        target_column,
        target_geom,
        source_table,
        source_column,
        source_geom,
        insert_type,
    ):
        """Updates Field with  given start timestamp (python datetime format) , end timestamp along with batch frequency , Here Batch frequency means frequency that you want to run a batch with, Currently Supported : DAILY,WEEKLY,MONTHLY,QUARTERLY,YEARLY Only Supports with default Python Enum Type input (eg: BatchFrequency.DAILY). This function is made with the purpose for future usage as well if we want to update specific element between timestamp"""
        # BatchFrequency.DAILY

        if start_batch_date is None:
            start_batch_date, end = self.getMax_timestamp(target_table)
        if end_batch_date is None:
            start, end_batch_date = self.getMax_timestamp(target_table)
        # Type checking
        if not isinstance(batch_frequency, BatchFrequency):
            raise TypeError("Batch Frequency Invalid")
        # Considering date is in yyyy-mm-dd H:M:S format
        logging.debug(
            f"""----------Update has been started for target = {target_table}:{target_column} from source = {source_table}:{source_column} , Range {start_batch_date} - {end_batch_date} , frequency {batch_frequency.value}----------"""
        )
        looping_date = start_batch_date
        loop_count = 0
        freq_date = start_batch_date

        if batch_frequency == BatchFrequency.WEEKLY:
            while freq_date >= end_batch_date:
                loop_count += 1
                freq_date -= relativedelta(weeks=1)
        elif batch_frequency == BatchFrequency.MONTHLY:
            while freq_date >= end_batch_date:
                loop_count += 1
                freq_date -= relativedelta(months=1)
        elif batch_frequency == BatchFrequency.HOURLY:
            while freq_date >= end_batch_date:
                loop_count += 1
                freq_date -= relativedelta(hours=1)
        else:
            loop_count = (looping_date - end_batch_date).days
        with tqdm(
            total=loop_count,
            desc=f"Updating {target_table}:{target_column}",
        ) as pbar:
            while looping_date >= end_batch_date:
                start_date = looping_date
                end_date = assign_end_wrt_frequency(start_date, batch_frequency)
                self.update_field(
                    end_date,
                    start_date,
                    target_table,
                    target_column,
                    target_geom,
                    source_table,
                    source_column,
                    source_geom,
                    insert_type,
                )
                pbar.update(1)
                looping_date = end_date
        # closing connection
        self.database.close_conn()
        logging.debug(
            f"""-----Update complete for {target_table}:{target_column}-- from {start_batch_date} to {end_batch_date} with batch frequency {batch_frequency.value} -----"""
        )


# The parser is only called if this script is called as a script/executable (via command line) but not when imported by another script
if __name__ == "__main__":
    # connection to the database
    connect = Raw()
    """You can get min and max timestamp available in the table as well which will be default or you can pass it through arguments"""
    argParser = argparse.ArgumentParser(description="Updates Field column of Table")
    argParser.add_argument(
        "-start",
        "--start",
        action="store",
        type=lambda s: datetime.datetime.strptime(s, "%Y-%m-%d"),
        dest="start",
        default=None,
        help="The start date of updating Field, Default is minimum timestamp of table",
    )
    argParser.add_argument(
        "-end",
        "--end",
        action="store",
        type=lambda s: datetime.datetime.strptime(s, "%Y-%m-%d"),
        dest="end",
        default=None,
        help="The end date of updating Field , Default is maximum timestamp of table",
    )
    argParser.add_argument(
        "-f",
        "--f",
        action="store",
        type=BatchFrequency,
        choices=list(BatchFrequency),
        dest="f",
        default="d",
        help="Frequency for Batch, Default is Daily",
    )
    argParser.add_argument(
        "-target_table",
        "--target_table",
        action="store",
        dest="target_table",
        default="ways_poly",
        help="Target Table Name to update, Default is ways_poly",
    )
    argParser.add_argument(
        "-target_column",
        "--target_column",
        action="store",
        dest="target_column",
        default="country",
        help="Target tables column Name to update, Default is country",
    )
    argParser.add_argument(
        "-target_geom",
        "--target_geom",
        action="store",
        dest="target_geom",
        default="geom",
        help="Target tables geom column Name to update, Default is geom",
    )
    argParser.add_argument(
        "-source_table",
        "--source_table",
        action="store",
        dest="source_table",
        default="geoboundaries",
        help="Source table from where rows will be intersected, Default is geoboundaries",
    )
    argParser.add_argument(
        "-source_column",
        "--source_column",
        action="store",
        dest="source_column",
        default="cid",
        help="Source table column name from which will be used for intersection, Default is cid",
    )
    argParser.add_argument(
        "-source_geom",
        "--source_geom",
        action="store",
        dest="source_geom",
        default="geom",
        help="Source table geom column Name to intersect, Default is geom",
    )
    argParser.add_argument(
        "-type",
        "--type",
        action="store",
        dest="type",
        default="array",
        choices=["int", "array"],
        help="Insert logic , Type of target column : Default array . For grid update type will be int",
    )

    args = argParser.parse_args()
    try:
        # Note : You can not run function forward , if you want to update Field of 2020 you need to pass  2020-12-30 to 2020-01-01
        # """This function can be imported and reused in other scripts """
        connect.batch_update(
            args.start,
            args.end,
            args.f,
            target_table=args.target_table,
            target_column=args.target_column,
            target_geom=args.target_geom,
            source_table=args.source_table,
            source_column=args.source_column,
            source_geom=args.source_geom,
            insert_type=args.type,
        )
    except Exception as e:
        logging.error(e)
        sys.exit(1)
